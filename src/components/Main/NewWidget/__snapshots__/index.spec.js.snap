// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should not crash when an non-existing widget is given 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawNewWidget
    accounts={
      Array [
        Object {
          "name": "Test account",
          "provider": "twitter",
          "uuid": "account1",
        },
      ]
    }
    intl={
      Object {
        "formatMessage": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Widget title",
                "id": "component.main.NewWidget.widgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Display widget title",
                "id": "component.main.NewWidget.displayWidgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Widget title",
                "id": "component.main.NewWidget.widgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Display widget title",
                "id": "component.main.NewWidget.displayWidgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Twitter",
                "id": "component.main.NewWidget.provider.twitter",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Widget title",
                "id": "component.main.NewWidget.widgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Display widget title",
                "id": "component.main.NewWidget.displayWidgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Widget title",
                "id": "component.main.NewWidget.widgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Display widget title",
                "id": "component.main.NewWidget.displayWidgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Twitter",
                "id": "component.main.NewWidget.provider.twitter",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Widget title",
                "id": "component.main.NewWidget.widgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Display widget title",
                "id": "component.main.NewWidget.displayWidgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Widget title",
                "id": "component.main.NewWidget.widgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Display widget title",
                "id": "component.main.NewWidget.displayWidgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Widget title",
                "id": "component.main.NewWidget.widgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Display widget title",
                "id": "component.main.NewWidget.displayWidgetTitle",
              },
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
      }
    }
    onClose={[MockFunction]}
    onCreateWidget={[MockFunction]}
    open={true}
    widget="non_existing"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): null,
  Symbol(enzyme.__nodes__): Array [
    null,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Should render correctly accounts list 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawNewWidget
    accounts={
      Array [
        Object {
          "name": "Test account",
          "provider": "twitter",
          "uuid": "account1",
        },
      ]
    }
    intl={
      Object {
        "formatMessage": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Widget title",
                "id": "component.main.NewWidget.widgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Display widget title",
                "id": "component.main.NewWidget.displayWidgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Widget title",
                "id": "component.main.NewWidget.widgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Display widget title",
                "id": "component.main.NewWidget.displayWidgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Twitter",
                "id": "component.main.NewWidget.provider.twitter",
              },
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
      }
    }
    onClose={[MockFunction]}
    onCreateWidget={[MockFunction]}
    open={true}
    widget="twitter_feed"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "actions": Array [
        <ConditionalComponent
          render={true}
        >
          <WithStyles(Button)
            onClick={[Function]}
          >
            <FormattedMessage
              defaultMessage="Back"
              id="component.main.NewWidget.back"
              values={Object {}}
            />
          </WithStyles(Button)>
        </ConditionalComponent>,
        <ConditionalComponent
          render={true}
        >
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="contained"
          >
            <FormattedMessage
              defaultMessage="Create"
              id="component.main.NewWidget.create"
              values={Object {}}
            />
          </WithStyles(Button)>
        </ConditionalComponent>,
        <ConditionalComponent
          render={false}
        >
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="contained"
          >
            <FormattedMessage
              defaultMessage="Next"
              id="component.main.NewWidget.next"
              values={Object {}}
            />
          </WithStyles(Button)>
        </ConditionalComponent>,
      ],
      "children": Array [
        <WithStyles(Stepper)
          activeStep={1}
        >
          <WithStyles(Step)>
            <WithStyles(StepLabel)>
              <FormattedMessage
                defaultMessage="Configure layout"
                id="component.main.NewWidget.step.1"
                values={Object {}}
              />
            </WithStyles(StepLabel)>
          </WithStyles(Step)>
          <WithStyles(Step)
            completed={false}
          >
            <WithStyles(StepLabel)>
              <FormattedMessage
                defaultMessage="Select account(s)"
                id="component.main.NewWidget.step.2"
                values={Object {}}
              />
            </WithStyles(StepLabel)>
          </WithStyles(Step)>
          <WithStyles(Step)
            completed={true}
          >
            <WithStyles(StepLabel)>
              <FormattedMessage
                defaultMessage="Configure widget"
                id="component.main.NewWidget.step.3"
                values={Object {}}
              />
            </WithStyles(StepLabel)>
          </WithStyles(Step)>
        </WithStyles(Stepper)>,
        false,
        <WithStyles(List)>
          <WithStyles(ListItem)
            button={true}
            onClick={[Function]}
          >
            <WithStyles(Checkbox)
              checked={false}
              disableRipple={true}
              tabIndex={-1}
            />
            <WithStyles(ListItemText)
              primary="Test account"
            />
          </WithStyles(ListItem)>
        </WithStyles(List)>,
        false,
      ],
      "onClose": [MockFunction],
      "open": true,
      "title": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "activeStep": 1,
          "children": Array [
            <WithStyles(Step)>
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure layout"
                  id="component.main.NewWidget.step.1"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>,
            <WithStyles(Step)
              completed={false}
            >
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Select account(s)"
                  id="component.main.NewWidget.step.2"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>,
            <WithStyles(Step)
              completed={true}
            >
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure widget"
                  id="component.main.NewWidget.step.3"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure layout"
                  id="component.main.NewWidget.step.1"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <FormattedMessage
                  defaultMessage="Configure layout"
                  id="component.main.NewWidget.step.1"
                  values={Object {}}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "defaultMessage": "Configure layout",
                  "id": "component.main.NewWidget.step.1",
                  "values": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Select account(s)"
                  id="component.main.NewWidget.step.2"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>,
              "completed": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <FormattedMessage
                  defaultMessage="Select account(s)"
                  id="component.main.NewWidget.step.2"
                  values={Object {}}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "defaultMessage": "Select account(s)",
                  "id": "component.main.NewWidget.step.2",
                  "values": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure widget"
                  id="component.main.NewWidget.step.3"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>,
              "completed": true,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <FormattedMessage
                  defaultMessage="Configure widget"
                  id="component.main.NewWidget.step.3"
                  values={Object {}}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "defaultMessage": "Configure widget",
                  "id": "component.main.NewWidget.step.3",
                  "values": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(ListItem)
              button={true}
              onClick={[Function]}
            >
              <WithStyles(Checkbox)
                checked={false}
                disableRipple={true}
                tabIndex={-1}
              />
              <WithStyles(ListItemText)
                primary="Test account"
              />
            </WithStyles(ListItem)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "account1",
            "nodeType": "class",
            "props": Object {
              "button": true,
              "children": Array [
                <WithStyles(Checkbox)
                  checked={false}
                  disableRipple={true}
                  tabIndex={-1}
                />,
                <WithStyles(ListItemText)
                  primary="Test account"
                />,
              ],
              "onClick": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "checked": false,
                  "disableRipple": true,
                  "tabIndex": -1,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "primary": "Test account",
                  "secondary": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      false,
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "actions": Array [
          <ConditionalComponent
            render={true}
          >
            <WithStyles(Button)
              onClick={[Function]}
            >
              <FormattedMessage
                defaultMessage="Back"
                id="component.main.NewWidget.back"
                values={Object {}}
              />
            </WithStyles(Button)>
          </ConditionalComponent>,
          <ConditionalComponent
            render={true}
          >
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              variant="contained"
            >
              <FormattedMessage
                defaultMessage="Create"
                id="component.main.NewWidget.create"
                values={Object {}}
              />
            </WithStyles(Button)>
          </ConditionalComponent>,
          <ConditionalComponent
            render={false}
          >
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              variant="contained"
            >
              <FormattedMessage
                defaultMessage="Next"
                id="component.main.NewWidget.next"
                values={Object {}}
              />
            </WithStyles(Button)>
          </ConditionalComponent>,
        ],
        "children": Array [
          <WithStyles(Stepper)
            activeStep={1}
          >
            <WithStyles(Step)>
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure layout"
                  id="component.main.NewWidget.step.1"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>
            <WithStyles(Step)
              completed={false}
            >
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Select account(s)"
                  id="component.main.NewWidget.step.2"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>
            <WithStyles(Step)
              completed={true}
            >
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure widget"
                  id="component.main.NewWidget.step.3"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>
          </WithStyles(Stepper)>,
          false,
          <WithStyles(List)>
            <WithStyles(ListItem)
              button={true}
              onClick={[Function]}
            >
              <WithStyles(Checkbox)
                checked={false}
                disableRipple={true}
                tabIndex={-1}
              />
              <WithStyles(ListItemText)
                primary="Test account"
              />
            </WithStyles(ListItem)>
          </WithStyles(List)>,
          false,
        ],
        "onClose": [MockFunction],
        "open": true,
        "title": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "activeStep": 1,
            "children": Array [
              <WithStyles(Step)>
                <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Configure layout"
                    id="component.main.NewWidget.step.1"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>
              </WithStyles(Step)>,
              <WithStyles(Step)
                completed={false}
              >
                <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Select account(s)"
                    id="component.main.NewWidget.step.2"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>
              </WithStyles(Step)>,
              <WithStyles(Step)
                completed={true}
              >
                <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Configure widget"
                    id="component.main.NewWidget.step.3"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>
              </WithStyles(Step)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Configure layout"
                    id="component.main.NewWidget.step.1"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Configure layout"
                    id="component.main.NewWidget.step.1"
                    values={Object {}}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Configure layout",
                    "id": "component.main.NewWidget.step.1",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Select account(s)"
                    id="component.main.NewWidget.step.2"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>,
                "completed": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Select account(s)"
                    id="component.main.NewWidget.step.2"
                    values={Object {}}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Select account(s)",
                    "id": "component.main.NewWidget.step.2",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Configure widget"
                    id="component.main.NewWidget.step.3"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>,
                "completed": true,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Configure widget"
                    id="component.main.NewWidget.step.3"
                    values={Object {}}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Configure widget",
                    "id": "component.main.NewWidget.step.3",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <WithStyles(ListItem)
                button={true}
                onClick={[Function]}
              >
                <WithStyles(Checkbox)
                  checked={false}
                  disableRipple={true}
                  tabIndex={-1}
                />
                <WithStyles(ListItemText)
                  primary="Test account"
                />
              </WithStyles(ListItem)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "account1",
              "nodeType": "class",
              "props": Object {
                "button": true,
                "children": Array [
                  <WithStyles(Checkbox)
                    checked={false}
                    disableRipple={true}
                    tabIndex={-1}
                  />,
                  <WithStyles(ListItemText)
                    primary="Test account"
                  />,
                ],
                "onClick": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "checked": false,
                    "disableRipple": true,
                    "tabIndex": -1,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "primary": "Test account",
                    "secondary": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        false,
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Should render correctly at step 0 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawNewWidget
    accounts={
      Array [
        Object {
          "name": "Test account",
          "provider": "twitter",
          "uuid": "account1",
        },
      ]
    }
    intl={
      Object {
        "formatMessage": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Widget title",
                "id": "component.main.NewWidget.widgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Display widget title",
                "id": "component.main.NewWidget.displayWidgetTitle",
              },
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
      }
    }
    onClose={[MockFunction]}
    onCreateWidget={[MockFunction]}
    open={true}
    widget="twitter_feed"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "actions": Array [
        <ConditionalComponent
          render={false}
        >
          <WithStyles(Button)
            onClick={[Function]}
          >
            <FormattedMessage
              defaultMessage="Back"
              id="component.main.NewWidget.back"
              values={Object {}}
            />
          </WithStyles(Button)>
        </ConditionalComponent>,
        <ConditionalComponent
          render={false}
        >
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="contained"
          >
            <FormattedMessage
              defaultMessage="Create"
              id="component.main.NewWidget.create"
              values={Object {}}
            />
          </WithStyles(Button)>
        </ConditionalComponent>,
        <ConditionalComponent
          render={true}
        >
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="contained"
          >
            <FormattedMessage
              defaultMessage="Next"
              id="component.main.NewWidget.next"
              values={Object {}}
            />
          </WithStyles(Button)>
        </ConditionalComponent>,
      ],
      "children": Array [
        <WithStyles(Stepper)
          activeStep={0}
        >
          <WithStyles(Step)>
            <WithStyles(StepLabel)>
              <FormattedMessage
                defaultMessage="Configure layout"
                id="component.main.NewWidget.step.1"
                values={Object {}}
              />
            </WithStyles(StepLabel)>
          </WithStyles(Step)>
          <WithStyles(Step)
            completed={false}
          >
            <WithStyles(StepLabel)>
              <FormattedMessage
                defaultMessage="Select account(s)"
                id="component.main.NewWidget.step.2"
                values={Object {}}
              />
            </WithStyles(StepLabel)>
          </WithStyles(Step)>
          <WithStyles(Step)
            completed={true}
          >
            <WithStyles(StepLabel)>
              <FormattedMessage
                defaultMessage="Configure widget"
                id="component.main.NewWidget.step.3"
                values={Object {}}
              />
            </WithStyles(StepLabel)>
          </WithStyles(Step)>
        </WithStyles(Stepper)>,
        <div>
          <TextField
            fullWidth={true}
            id="widget-title"
            onChange={[Function]}
            required={false}
            select={false}
            value=""
            variant="standard"
          />
          <br />
          <WithStyles(WithFormControlContext(FormControlLabel))
            control={
              <WithStyles(Switch)
                checked={true}
                onChange={[Function]}
                value="displayTitle"
              />
            }
          />
        </div>,
        false,
        false,
      ],
      "onClose": [MockFunction],
      "open": true,
      "title": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "activeStep": 0,
          "children": Array [
            <WithStyles(Step)>
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure layout"
                  id="component.main.NewWidget.step.1"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>,
            <WithStyles(Step)
              completed={false}
            >
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Select account(s)"
                  id="component.main.NewWidget.step.2"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>,
            <WithStyles(Step)
              completed={true}
            >
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure widget"
                  id="component.main.NewWidget.step.3"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure layout"
                  id="component.main.NewWidget.step.1"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <FormattedMessage
                  defaultMessage="Configure layout"
                  id="component.main.NewWidget.step.1"
                  values={Object {}}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "defaultMessage": "Configure layout",
                  "id": "component.main.NewWidget.step.1",
                  "values": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Select account(s)"
                  id="component.main.NewWidget.step.2"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>,
              "completed": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <FormattedMessage
                  defaultMessage="Select account(s)"
                  id="component.main.NewWidget.step.2"
                  values={Object {}}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "defaultMessage": "Select account(s)",
                  "id": "component.main.NewWidget.step.2",
                  "values": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure widget"
                  id="component.main.NewWidget.step.3"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>,
              "completed": true,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <FormattedMessage
                  defaultMessage="Configure widget"
                  id="component.main.NewWidget.step.3"
                  values={Object {}}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "defaultMessage": "Configure widget",
                  "id": "component.main.NewWidget.step.3",
                  "values": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <TextField
              fullWidth={true}
              id="widget-title"
              onChange={[Function]}
              required={false}
              select={false}
              value=""
              variant="standard"
            />,
            <br />,
            <WithStyles(WithFormControlContext(FormControlLabel))
              control={
                <WithStyles(Switch)
                  checked={true}
                  onChange={[Function]}
                  value="displayTitle"
                />
              }
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "fullWidth": true,
              "id": "widget-title",
              "label": undefined,
              "onChange": [Function],
              "required": false,
              "select": false,
              "value": "",
              "variant": "standard",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "control": <WithStyles(Switch)
                checked={true}
                onChange={[Function]}
                value="displayTitle"
              />,
              "label": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      false,
      false,
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "actions": Array [
          <ConditionalComponent
            render={false}
          >
            <WithStyles(Button)
              onClick={[Function]}
            >
              <FormattedMessage
                defaultMessage="Back"
                id="component.main.NewWidget.back"
                values={Object {}}
              />
            </WithStyles(Button)>
          </ConditionalComponent>,
          <ConditionalComponent
            render={false}
          >
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              variant="contained"
            >
              <FormattedMessage
                defaultMessage="Create"
                id="component.main.NewWidget.create"
                values={Object {}}
              />
            </WithStyles(Button)>
          </ConditionalComponent>,
          <ConditionalComponent
            render={true}
          >
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              variant="contained"
            >
              <FormattedMessage
                defaultMessage="Next"
                id="component.main.NewWidget.next"
                values={Object {}}
              />
            </WithStyles(Button)>
          </ConditionalComponent>,
        ],
        "children": Array [
          <WithStyles(Stepper)
            activeStep={0}
          >
            <WithStyles(Step)>
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure layout"
                  id="component.main.NewWidget.step.1"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>
            <WithStyles(Step)
              completed={false}
            >
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Select account(s)"
                  id="component.main.NewWidget.step.2"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>
            <WithStyles(Step)
              completed={true}
            >
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure widget"
                  id="component.main.NewWidget.step.3"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>
          </WithStyles(Stepper)>,
          <div>
            <TextField
              fullWidth={true}
              id="widget-title"
              onChange={[Function]}
              required={false}
              select={false}
              value=""
              variant="standard"
            />
            <br />
            <WithStyles(WithFormControlContext(FormControlLabel))
              control={
                <WithStyles(Switch)
                  checked={true}
                  onChange={[Function]}
                  value="displayTitle"
                />
              }
            />
          </div>,
          false,
          false,
        ],
        "onClose": [MockFunction],
        "open": true,
        "title": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "activeStep": 0,
            "children": Array [
              <WithStyles(Step)>
                <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Configure layout"
                    id="component.main.NewWidget.step.1"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>
              </WithStyles(Step)>,
              <WithStyles(Step)
                completed={false}
              >
                <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Select account(s)"
                    id="component.main.NewWidget.step.2"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>
              </WithStyles(Step)>,
              <WithStyles(Step)
                completed={true}
              >
                <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Configure widget"
                    id="component.main.NewWidget.step.3"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>
              </WithStyles(Step)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Configure layout"
                    id="component.main.NewWidget.step.1"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Configure layout"
                    id="component.main.NewWidget.step.1"
                    values={Object {}}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Configure layout",
                    "id": "component.main.NewWidget.step.1",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Select account(s)"
                    id="component.main.NewWidget.step.2"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>,
                "completed": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Select account(s)"
                    id="component.main.NewWidget.step.2"
                    values={Object {}}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Select account(s)",
                    "id": "component.main.NewWidget.step.2",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Configure widget"
                    id="component.main.NewWidget.step.3"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>,
                "completed": true,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Configure widget"
                    id="component.main.NewWidget.step.3"
                    values={Object {}}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Configure widget",
                    "id": "component.main.NewWidget.step.3",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <TextField
                fullWidth={true}
                id="widget-title"
                onChange={[Function]}
                required={false}
                select={false}
                value=""
                variant="standard"
              />,
              <br />,
              <WithStyles(WithFormControlContext(FormControlLabel))
                control={
                  <WithStyles(Switch)
                    checked={true}
                    onChange={[Function]}
                    value="displayTitle"
                  />
                }
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "fullWidth": true,
                "id": "widget-title",
                "label": undefined,
                "onChange": [Function],
                "required": false,
                "select": false,
                "value": "",
                "variant": "standard",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "control": <WithStyles(Switch)
                  checked={true}
                  onChange={[Function]}
                  value="displayTitle"
                />,
                "label": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        false,
        false,
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Should render correctly widget form 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawNewWidget
    accounts={
      Array [
        Object {
          "name": "Test account",
          "provider": "twitter",
          "uuid": "account1",
        },
      ]
    }
    intl={
      Object {
        "formatMessage": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Widget title",
                "id": "component.main.NewWidget.widgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Display widget title",
                "id": "component.main.NewWidget.displayWidgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Widget title",
                "id": "component.main.NewWidget.widgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Display widget title",
                "id": "component.main.NewWidget.displayWidgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Twitter",
                "id": "component.main.NewWidget.provider.twitter",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Widget title",
                "id": "component.main.NewWidget.widgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Display widget title",
                "id": "component.main.NewWidget.displayWidgetTitle",
              },
            ],
            Array [
              Object {
                "defaultMessage": "Add a widget",
                "id": "component.main.NewWidget.title",
              },
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
      }
    }
    onClose={[MockFunction]}
    onCreateWidget={[MockFunction]}
    open={true}
    widget="misc_rss"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "actions": Array [
        <ConditionalComponent
          render={true}
        >
          <WithStyles(Button)
            onClick={[Function]}
          >
            <FormattedMessage
              defaultMessage="Back"
              id="component.main.NewWidget.back"
              values={Object {}}
            />
          </WithStyles(Button)>
        </ConditionalComponent>,
        <ConditionalComponent
          render={true}
        >
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="contained"
          >
            <FormattedMessage
              defaultMessage="Create"
              id="component.main.NewWidget.create"
              values={Object {}}
            />
          </WithStyles(Button)>
        </ConditionalComponent>,
        <ConditionalComponent
          render={false}
        >
          <WithStyles(Button)
            color="primary"
            onClick={[Function]}
            variant="contained"
          >
            <FormattedMessage
              defaultMessage="Next"
              id="component.main.NewWidget.next"
              values={Object {}}
            />
          </WithStyles(Button)>
        </ConditionalComponent>,
      ],
      "children": Array [
        <WithStyles(Stepper)
          activeStep={2}
        >
          <WithStyles(Step)>
            <WithStyles(StepLabel)>
              <FormattedMessage
                defaultMessage="Configure layout"
                id="component.main.NewWidget.step.1"
                values={Object {}}
              />
            </WithStyles(StepLabel)>
          </WithStyles(Step)>
          <WithStyles(Step)
            completed={true}
          >
            <WithStyles(StepLabel)>
              <FormattedMessage
                defaultMessage="Select account(s)"
                id="component.main.NewWidget.step.2"
                values={Object {}}
              />
            </WithStyles(StepLabel)>
          </WithStyles(Step)>
          <WithStyles(Step)
            completed={false}
          >
            <WithStyles(StepLabel)>
              <FormattedMessage
                defaultMessage="Configure widget"
                id="component.main.NewWidget.step.3"
                values={Object {}}
              />
            </WithStyles(StepLabel)>
          </WithStyles(Step)>
        </WithStyles(Stepper)>,
        false,
        false,
        <InjectIntl(RawRssForm)
          config={Object {}}
          onConfigUpdate={[Function]}
        />,
      ],
      "onClose": [MockFunction],
      "open": true,
      "title": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "activeStep": 2,
          "children": Array [
            <WithStyles(Step)>
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure layout"
                  id="component.main.NewWidget.step.1"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>,
            <WithStyles(Step)
              completed={true}
            >
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Select account(s)"
                  id="component.main.NewWidget.step.2"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>,
            <WithStyles(Step)
              completed={false}
            >
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure widget"
                  id="component.main.NewWidget.step.3"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure layout"
                  id="component.main.NewWidget.step.1"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <FormattedMessage
                  defaultMessage="Configure layout"
                  id="component.main.NewWidget.step.1"
                  values={Object {}}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "defaultMessage": "Configure layout",
                  "id": "component.main.NewWidget.step.1",
                  "values": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Select account(s)"
                  id="component.main.NewWidget.step.2"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>,
              "completed": true,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <FormattedMessage
                  defaultMessage="Select account(s)"
                  id="component.main.NewWidget.step.2"
                  values={Object {}}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "defaultMessage": "Select account(s)",
                  "id": "component.main.NewWidget.step.2",
                  "values": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure widget"
                  id="component.main.NewWidget.step.3"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>,
              "completed": false,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <FormattedMessage
                  defaultMessage="Configure widget"
                  id="component.main.NewWidget.step.3"
                  values={Object {}}
                />,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "defaultMessage": "Configure widget",
                  "id": "component.main.NewWidget.step.3",
                  "values": Object {},
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      false,
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "config": Object {},
          "onConfigUpdate": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "actions": Array [
          <ConditionalComponent
            render={true}
          >
            <WithStyles(Button)
              onClick={[Function]}
            >
              <FormattedMessage
                defaultMessage="Back"
                id="component.main.NewWidget.back"
                values={Object {}}
              />
            </WithStyles(Button)>
          </ConditionalComponent>,
          <ConditionalComponent
            render={true}
          >
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              variant="contained"
            >
              <FormattedMessage
                defaultMessage="Create"
                id="component.main.NewWidget.create"
                values={Object {}}
              />
            </WithStyles(Button)>
          </ConditionalComponent>,
          <ConditionalComponent
            render={false}
          >
            <WithStyles(Button)
              color="primary"
              onClick={[Function]}
              variant="contained"
            >
              <FormattedMessage
                defaultMessage="Next"
                id="component.main.NewWidget.next"
                values={Object {}}
              />
            </WithStyles(Button)>
          </ConditionalComponent>,
        ],
        "children": Array [
          <WithStyles(Stepper)
            activeStep={2}
          >
            <WithStyles(Step)>
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure layout"
                  id="component.main.NewWidget.step.1"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>
            <WithStyles(Step)
              completed={true}
            >
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Select account(s)"
                  id="component.main.NewWidget.step.2"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>
            <WithStyles(Step)
              completed={false}
            >
              <WithStyles(StepLabel)>
                <FormattedMessage
                  defaultMessage="Configure widget"
                  id="component.main.NewWidget.step.3"
                  values={Object {}}
                />
              </WithStyles(StepLabel)>
            </WithStyles(Step)>
          </WithStyles(Stepper)>,
          false,
          false,
          <InjectIntl(RawRssForm)
            config={Object {}}
            onConfigUpdate={[Function]}
          />,
        ],
        "onClose": [MockFunction],
        "open": true,
        "title": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "activeStep": 2,
            "children": Array [
              <WithStyles(Step)>
                <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Configure layout"
                    id="component.main.NewWidget.step.1"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>
              </WithStyles(Step)>,
              <WithStyles(Step)
                completed={true}
              >
                <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Select account(s)"
                    id="component.main.NewWidget.step.2"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>
              </WithStyles(Step)>,
              <WithStyles(Step)
                completed={false}
              >
                <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Configure widget"
                    id="component.main.NewWidget.step.3"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>
              </WithStyles(Step)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Configure layout"
                    id="component.main.NewWidget.step.1"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Configure layout"
                    id="component.main.NewWidget.step.1"
                    values={Object {}}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Configure layout",
                    "id": "component.main.NewWidget.step.1",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Select account(s)"
                    id="component.main.NewWidget.step.2"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>,
                "completed": true,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Select account(s)"
                    id="component.main.NewWidget.step.2"
                    values={Object {}}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Select account(s)",
                    "id": "component.main.NewWidget.step.2",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <WithStyles(StepLabel)>
                  <FormattedMessage
                    defaultMessage="Configure widget"
                    id="component.main.NewWidget.step.3"
                    values={Object {}}
                  />
                </WithStyles(StepLabel)>,
                "completed": false,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <FormattedMessage
                    defaultMessage="Configure widget"
                    id="component.main.NewWidget.step.3"
                    values={Object {}}
                  />,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "defaultMessage": "Configure widget",
                    "id": "component.main.NewWidget.step.3",
                    "values": Object {},
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        false,
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "config": Object {},
            "onConfigUpdate": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
