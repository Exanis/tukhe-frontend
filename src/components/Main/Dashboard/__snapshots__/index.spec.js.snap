// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should keep styling consistent 1`] = `
Object {
  "container": Object {
    "height": "100%",
    "overflow": "auto",
    "width": "100%",
  },
  "header": Object {
    "alignItems": "center",
    "display": "flex",
    "flexDirection": "row",
  },
  "headerTitle": Object {
    "flex": 1,
  },
  "widget": Object {
    "height": "100%",
  },
  "widgetContainer": Object {
    "height": "calc(100% - 25px)",
    "overflow": "auto",
  },
}
`;

exports[`Should render correctly in edit mode 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawDashboard
    addToWidgetData={[MockFunction]}
    classes={Object {}}
    closeElementPopup={[MockFunction]}
    data={
      Object {
        "widget1": Array [],
      }
    }
    displayElementInPopup={[MockFunction]}
    editable={true}
    layout={Object {}}
    onLayoutChange={[MockFunction]}
    refreshWithAccount={[MockFunction]}
    refreshWithoutAccount={[MockFunction]}
    startWidgetProcess={[MockFunction]}
    stopWidgetProcess={[MockFunction]}
    updatePopupProps={[MockFunction]}
    updateWidgetData={[MockFunction]}
    widgetActionWithAccount={[MockFunction]}
    widgetActionWithoutAccount={[MockFunction]}
    widgets={
      Array [
        Object {
          "header": true,
          "title": "Test feed",
          "type": "twitter_feed",
          "uuid": "widget1",
        },
        Object {
          "header": false,
          "title": "Test notifications",
          "type": "twitter_notifications",
          "uuid": "widget2",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <WidthProvider
        compactType="vertical"
        isDraggable={true}
        isResizable={true}
        layout={Object {}}
        measureBeforeMount={false}
        onLayoutChange={[Function]}
      >
        <WithStyles(Card)
          id="widget1"
        >
          <WithStyles(CardContent)>
            <ConditionalComponent
              render={true}
            >
              <WithStyles(Typography)
                color="textSecondary"
                gutterBottom={true}
              >
                <div>
                  Test feed
                </div>
              </WithStyles(Typography)>
            </ConditionalComponent>
            <InjectIntl(RawFeed)
              actionWithAccount={[Function]}
              actionWithoutAccount={[Function]}
              addToWidgetData={[Function]}
              closeElementPopup={[MockFunction]}
              data={Array []}
              displayElementInPopup={[MockFunction]}
              refreshWithAccount={[Function]}
              refreshWithoutAccount={[Function]}
              startWidgetProcess={[MockFunction]}
              stopWidgetProcess={[MockFunction]}
              updateElement={[Function]}
              updatePopupProps={[MockFunction]}
              updateWidgetActions={[Function]}
              uuid="widget1"
            />
          </WithStyles(CardContent)>
        </WithStyles(Card)>
        <WithStyles(Card)
          id="widget2"
        >
          <WithStyles(CardContent)>
            <ConditionalComponent
              render={true}
            >
              <WithStyles(Typography)
                color="textSecondary"
                gutterBottom={true}
              >
                <div>
                  Test notifications
                </div>
              </WithStyles(Typography)>
            </ConditionalComponent>
            <Notifications
              actionWithAccount={[Function]}
              actionWithoutAccount={[Function]}
              addToWidgetData={[Function]}
              closeElementPopup={[MockFunction]}
              displayElementInPopup={[MockFunction]}
              refreshWithAccount={[Function]}
              refreshWithoutAccount={[Function]}
              startWidgetProcess={[MockFunction]}
              stopWidgetProcess={[MockFunction]}
              updateElement={[Function]}
              updatePopupProps={[MockFunction]}
              updateWidgetActions={[Function]}
              uuid="widget2"
            />
          </WithStyles(CardContent)>
        </WithStyles(Card)>
      </WidthProvider>,
      "className": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(Card)
            id="widget1"
          >
            <WithStyles(CardContent)>
              <ConditionalComponent
                render={true}
              >
                <WithStyles(Typography)
                  color="textSecondary"
                  gutterBottom={true}
                >
                  <div>
                    Test feed
                  </div>
                </WithStyles(Typography)>
              </ConditionalComponent>
              <InjectIntl(RawFeed)
                actionWithAccount={[Function]}
                actionWithoutAccount={[Function]}
                addToWidgetData={[Function]}
                closeElementPopup={[MockFunction]}
                data={Array []}
                displayElementInPopup={[MockFunction]}
                refreshWithAccount={[Function]}
                refreshWithoutAccount={[Function]}
                startWidgetProcess={[MockFunction]}
                stopWidgetProcess={[MockFunction]}
                updateElement={[Function]}
                updatePopupProps={[MockFunction]}
                updateWidgetActions={[Function]}
                uuid="widget1"
              />
            </WithStyles(CardContent)>
          </WithStyles(Card)>,
          <WithStyles(Card)
            id="widget2"
          >
            <WithStyles(CardContent)>
              <ConditionalComponent
                render={true}
              >
                <WithStyles(Typography)
                  color="textSecondary"
                  gutterBottom={true}
                >
                  <div>
                    Test notifications
                  </div>
                </WithStyles(Typography)>
              </ConditionalComponent>
              <Notifications
                actionWithAccount={[Function]}
                actionWithoutAccount={[Function]}
                addToWidgetData={[Function]}
                closeElementPopup={[MockFunction]}
                displayElementInPopup={[MockFunction]}
                refreshWithAccount={[Function]}
                refreshWithoutAccount={[Function]}
                startWidgetProcess={[MockFunction]}
                stopWidgetProcess={[MockFunction]}
                updateElement={[Function]}
                updatePopupProps={[MockFunction]}
                updateWidgetActions={[Function]}
                uuid="widget2"
              />
            </WithStyles(CardContent)>
          </WithStyles(Card)>,
        ],
        "compactType": "vertical",
        "isDraggable": true,
        "isResizable": true,
        "layout": Object {},
        "measureBeforeMount": false,
        "onLayoutChange": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "widget1",
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(CardContent)>
              <ConditionalComponent
                render={true}
              >
                <WithStyles(Typography)
                  color="textSecondary"
                  gutterBottom={true}
                >
                  <div>
                    Test feed
                  </div>
                </WithStyles(Typography)>
              </ConditionalComponent>
              <InjectIntl(RawFeed)
                actionWithAccount={[Function]}
                actionWithoutAccount={[Function]}
                addToWidgetData={[Function]}
                closeElementPopup={[MockFunction]}
                data={Array []}
                displayElementInPopup={[MockFunction]}
                refreshWithAccount={[Function]}
                refreshWithoutAccount={[Function]}
                startWidgetProcess={[MockFunction]}
                stopWidgetProcess={[MockFunction]}
                updateElement={[Function]}
                updatePopupProps={[MockFunction]}
                updateWidgetActions={[Function]}
                uuid="widget1"
              />
            </WithStyles(CardContent)>,
            "id": "widget1",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <ConditionalComponent
                  render={true}
                >
                  <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test feed
                    </div>
                  </WithStyles(Typography)>
                </ConditionalComponent>,
                <InjectIntl(RawFeed)
                  actionWithAccount={[Function]}
                  actionWithoutAccount={[Function]}
                  addToWidgetData={[Function]}
                  closeElementPopup={[MockFunction]}
                  data={Array []}
                  displayElementInPopup={[MockFunction]}
                  refreshWithAccount={[Function]}
                  refreshWithoutAccount={[Function]}
                  startWidgetProcess={[MockFunction]}
                  stopWidgetProcess={[MockFunction]}
                  updateElement={[Function]}
                  updatePopupProps={[MockFunction]}
                  updateWidgetActions={[Function]}
                  uuid="widget1"
                />,
              ],
              "className": undefined,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test feed
                    </div>
                  </WithStyles(Typography)>,
                  "render": true,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <div>
                        Test feed
                      </div>,
                      undefined,
                    ],
                    "className": undefined,
                    "color": "textSecondary",
                    "gutterBottom": true,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Test feed",
                        "className": undefined,
                      },
                      "ref": null,
                      "rendered": "Test feed",
                      "type": "div",
                    },
                    undefined,
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "actionWithAccount": [Function],
                  "actionWithoutAccount": [Function],
                  "addToWidgetData": [Function],
                  "closeElementPopup": [MockFunction],
                  "containerClass": undefined,
                  "data": Array [],
                  "displayElementInPopup": [MockFunction],
                  "refreshWithAccount": [Function],
                  "refreshWithoutAccount": [Function],
                  "startWidgetProcess": [MockFunction],
                  "stopWidgetProcess": [MockFunction],
                  "updateElement": [Function],
                  "updatePopupProps": [MockFunction],
                  "updateWidgetActions": [Function],
                  "uuid": "widget1",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "widget2",
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(CardContent)>
              <ConditionalComponent
                render={true}
              >
                <WithStyles(Typography)
                  color="textSecondary"
                  gutterBottom={true}
                >
                  <div>
                    Test notifications
                  </div>
                </WithStyles(Typography)>
              </ConditionalComponent>
              <Notifications
                actionWithAccount={[Function]}
                actionWithoutAccount={[Function]}
                addToWidgetData={[Function]}
                closeElementPopup={[MockFunction]}
                displayElementInPopup={[MockFunction]}
                refreshWithAccount={[Function]}
                refreshWithoutAccount={[Function]}
                startWidgetProcess={[MockFunction]}
                stopWidgetProcess={[MockFunction]}
                updateElement={[Function]}
                updatePopupProps={[MockFunction]}
                updateWidgetActions={[Function]}
                uuid="widget2"
              />
            </WithStyles(CardContent)>,
            "id": "widget2",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <ConditionalComponent
                  render={true}
                >
                  <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test notifications
                    </div>
                  </WithStyles(Typography)>
                </ConditionalComponent>,
                <Notifications
                  actionWithAccount={[Function]}
                  actionWithoutAccount={[Function]}
                  addToWidgetData={[Function]}
                  closeElementPopup={[MockFunction]}
                  displayElementInPopup={[MockFunction]}
                  refreshWithAccount={[Function]}
                  refreshWithoutAccount={[Function]}
                  startWidgetProcess={[MockFunction]}
                  stopWidgetProcess={[MockFunction]}
                  updateElement={[Function]}
                  updatePopupProps={[MockFunction]}
                  updateWidgetActions={[Function]}
                  uuid="widget2"
                />,
              ],
              "className": undefined,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test notifications
                    </div>
                  </WithStyles(Typography)>,
                  "render": true,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <div>
                        Test notifications
                      </div>,
                      undefined,
                    ],
                    "className": undefined,
                    "color": "textSecondary",
                    "gutterBottom": true,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Test notifications",
                        "className": undefined,
                      },
                      "ref": null,
                      "rendered": "Test notifications",
                      "type": "div",
                    },
                    undefined,
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "actionWithAccount": [Function],
                  "actionWithoutAccount": [Function],
                  "addToWidgetData": [Function],
                  "closeElementPopup": [MockFunction],
                  "containerClass": undefined,
                  "data": undefined,
                  "displayElementInPopup": [MockFunction],
                  "refreshWithAccount": [Function],
                  "refreshWithoutAccount": [Function],
                  "startWidgetProcess": [MockFunction],
                  "stopWidgetProcess": [MockFunction],
                  "updateElement": [Function],
                  "updatePopupProps": [MockFunction],
                  "updateWidgetActions": [Function],
                  "uuid": "widget2",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <WidthProvider
          compactType="vertical"
          isDraggable={true}
          isResizable={true}
          layout={Object {}}
          measureBeforeMount={false}
          onLayoutChange={[Function]}
        >
          <WithStyles(Card)
            id="widget1"
          >
            <WithStyles(CardContent)>
              <ConditionalComponent
                render={true}
              >
                <WithStyles(Typography)
                  color="textSecondary"
                  gutterBottom={true}
                >
                  <div>
                    Test feed
                  </div>
                </WithStyles(Typography)>
              </ConditionalComponent>
              <InjectIntl(RawFeed)
                actionWithAccount={[Function]}
                actionWithoutAccount={[Function]}
                addToWidgetData={[Function]}
                closeElementPopup={[MockFunction]}
                data={Array []}
                displayElementInPopup={[MockFunction]}
                refreshWithAccount={[Function]}
                refreshWithoutAccount={[Function]}
                startWidgetProcess={[MockFunction]}
                stopWidgetProcess={[MockFunction]}
                updateElement={[Function]}
                updatePopupProps={[MockFunction]}
                updateWidgetActions={[Function]}
                uuid="widget1"
              />
            </WithStyles(CardContent)>
          </WithStyles(Card)>
          <WithStyles(Card)
            id="widget2"
          >
            <WithStyles(CardContent)>
              <ConditionalComponent
                render={true}
              >
                <WithStyles(Typography)
                  color="textSecondary"
                  gutterBottom={true}
                >
                  <div>
                    Test notifications
                  </div>
                </WithStyles(Typography)>
              </ConditionalComponent>
              <Notifications
                actionWithAccount={[Function]}
                actionWithoutAccount={[Function]}
                addToWidgetData={[Function]}
                closeElementPopup={[MockFunction]}
                displayElementInPopup={[MockFunction]}
                refreshWithAccount={[Function]}
                refreshWithoutAccount={[Function]}
                startWidgetProcess={[MockFunction]}
                stopWidgetProcess={[MockFunction]}
                updateElement={[Function]}
                updatePopupProps={[MockFunction]}
                updateWidgetActions={[Function]}
                uuid="widget2"
              />
            </WithStyles(CardContent)>
          </WithStyles(Card)>
        </WidthProvider>,
        "className": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(Card)
              id="widget1"
            >
              <WithStyles(CardContent)>
                <ConditionalComponent
                  render={true}
                >
                  <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test feed
                    </div>
                  </WithStyles(Typography)>
                </ConditionalComponent>
                <InjectIntl(RawFeed)
                  actionWithAccount={[Function]}
                  actionWithoutAccount={[Function]}
                  addToWidgetData={[Function]}
                  closeElementPopup={[MockFunction]}
                  data={Array []}
                  displayElementInPopup={[MockFunction]}
                  refreshWithAccount={[Function]}
                  refreshWithoutAccount={[Function]}
                  startWidgetProcess={[MockFunction]}
                  stopWidgetProcess={[MockFunction]}
                  updateElement={[Function]}
                  updatePopupProps={[MockFunction]}
                  updateWidgetActions={[Function]}
                  uuid="widget1"
                />
              </WithStyles(CardContent)>
            </WithStyles(Card)>,
            <WithStyles(Card)
              id="widget2"
            >
              <WithStyles(CardContent)>
                <ConditionalComponent
                  render={true}
                >
                  <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test notifications
                    </div>
                  </WithStyles(Typography)>
                </ConditionalComponent>
                <Notifications
                  actionWithAccount={[Function]}
                  actionWithoutAccount={[Function]}
                  addToWidgetData={[Function]}
                  closeElementPopup={[MockFunction]}
                  displayElementInPopup={[MockFunction]}
                  refreshWithAccount={[Function]}
                  refreshWithoutAccount={[Function]}
                  startWidgetProcess={[MockFunction]}
                  stopWidgetProcess={[MockFunction]}
                  updateElement={[Function]}
                  updatePopupProps={[MockFunction]}
                  updateWidgetActions={[Function]}
                  uuid="widget2"
                />
              </WithStyles(CardContent)>
            </WithStyles(Card)>,
          ],
          "compactType": "vertical",
          "isDraggable": true,
          "isResizable": true,
          "layout": Object {},
          "measureBeforeMount": false,
          "onLayoutChange": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "widget1",
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(CardContent)>
                <ConditionalComponent
                  render={true}
                >
                  <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test feed
                    </div>
                  </WithStyles(Typography)>
                </ConditionalComponent>
                <InjectIntl(RawFeed)
                  actionWithAccount={[Function]}
                  actionWithoutAccount={[Function]}
                  addToWidgetData={[Function]}
                  closeElementPopup={[MockFunction]}
                  data={Array []}
                  displayElementInPopup={[MockFunction]}
                  refreshWithAccount={[Function]}
                  refreshWithoutAccount={[Function]}
                  startWidgetProcess={[MockFunction]}
                  stopWidgetProcess={[MockFunction]}
                  updateElement={[Function]}
                  updatePopupProps={[MockFunction]}
                  updateWidgetActions={[Function]}
                  uuid="widget1"
                />
              </WithStyles(CardContent)>,
              "id": "widget1",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <ConditionalComponent
                    render={true}
                  >
                    <WithStyles(Typography)
                      color="textSecondary"
                      gutterBottom={true}
                    >
                      <div>
                        Test feed
                      </div>
                    </WithStyles(Typography)>
                  </ConditionalComponent>,
                  <InjectIntl(RawFeed)
                    actionWithAccount={[Function]}
                    actionWithoutAccount={[Function]}
                    addToWidgetData={[Function]}
                    closeElementPopup={[MockFunction]}
                    data={Array []}
                    displayElementInPopup={[MockFunction]}
                    refreshWithAccount={[Function]}
                    refreshWithoutAccount={[Function]}
                    startWidgetProcess={[MockFunction]}
                    stopWidgetProcess={[MockFunction]}
                    updateElement={[Function]}
                    updatePopupProps={[MockFunction]}
                    updateWidgetActions={[Function]}
                    uuid="widget1"
                  />,
                ],
                "className": undefined,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <WithStyles(Typography)
                      color="textSecondary"
                      gutterBottom={true}
                    >
                      <div>
                        Test feed
                      </div>
                    </WithStyles(Typography)>,
                    "render": true,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        <div>
                          Test feed
                        </div>,
                        undefined,
                      ],
                      "className": undefined,
                      "color": "textSecondary",
                      "gutterBottom": true,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Test feed",
                          "className": undefined,
                        },
                        "ref": null,
                        "rendered": "Test feed",
                        "type": "div",
                      },
                      undefined,
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "actionWithAccount": [Function],
                    "actionWithoutAccount": [Function],
                    "addToWidgetData": [Function],
                    "closeElementPopup": [MockFunction],
                    "containerClass": undefined,
                    "data": Array [],
                    "displayElementInPopup": [MockFunction],
                    "refreshWithAccount": [Function],
                    "refreshWithoutAccount": [Function],
                    "startWidgetProcess": [MockFunction],
                    "stopWidgetProcess": [MockFunction],
                    "updateElement": [Function],
                    "updatePopupProps": [MockFunction],
                    "updateWidgetActions": [Function],
                    "uuid": "widget1",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "widget2",
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(CardContent)>
                <ConditionalComponent
                  render={true}
                >
                  <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test notifications
                    </div>
                  </WithStyles(Typography)>
                </ConditionalComponent>
                <Notifications
                  actionWithAccount={[Function]}
                  actionWithoutAccount={[Function]}
                  addToWidgetData={[Function]}
                  closeElementPopup={[MockFunction]}
                  displayElementInPopup={[MockFunction]}
                  refreshWithAccount={[Function]}
                  refreshWithoutAccount={[Function]}
                  startWidgetProcess={[MockFunction]}
                  stopWidgetProcess={[MockFunction]}
                  updateElement={[Function]}
                  updatePopupProps={[MockFunction]}
                  updateWidgetActions={[Function]}
                  uuid="widget2"
                />
              </WithStyles(CardContent)>,
              "id": "widget2",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <ConditionalComponent
                    render={true}
                  >
                    <WithStyles(Typography)
                      color="textSecondary"
                      gutterBottom={true}
                    >
                      <div>
                        Test notifications
                      </div>
                    </WithStyles(Typography)>
                  </ConditionalComponent>,
                  <Notifications
                    actionWithAccount={[Function]}
                    actionWithoutAccount={[Function]}
                    addToWidgetData={[Function]}
                    closeElementPopup={[MockFunction]}
                    displayElementInPopup={[MockFunction]}
                    refreshWithAccount={[Function]}
                    refreshWithoutAccount={[Function]}
                    startWidgetProcess={[MockFunction]}
                    stopWidgetProcess={[MockFunction]}
                    updateElement={[Function]}
                    updatePopupProps={[MockFunction]}
                    updateWidgetActions={[Function]}
                    uuid="widget2"
                  />,
                ],
                "className": undefined,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <WithStyles(Typography)
                      color="textSecondary"
                      gutterBottom={true}
                    >
                      <div>
                        Test notifications
                      </div>
                    </WithStyles(Typography)>,
                    "render": true,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        <div>
                          Test notifications
                        </div>,
                        undefined,
                      ],
                      "className": undefined,
                      "color": "textSecondary",
                      "gutterBottom": true,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Test notifications",
                          "className": undefined,
                        },
                        "ref": null,
                        "rendered": "Test notifications",
                        "type": "div",
                      },
                      undefined,
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "actionWithAccount": [Function],
                    "actionWithoutAccount": [Function],
                    "addToWidgetData": [Function],
                    "closeElementPopup": [MockFunction],
                    "containerClass": undefined,
                    "data": undefined,
                    "displayElementInPopup": [MockFunction],
                    "refreshWithAccount": [Function],
                    "refreshWithoutAccount": [Function],
                    "startWidgetProcess": [MockFunction],
                    "stopWidgetProcess": [MockFunction],
                    "updateElement": [Function],
                    "updatePopupProps": [MockFunction],
                    "updateWidgetActions": [Function],
                    "uuid": "widget2",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Should render correctly with props 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawDashboard
    addToWidgetData={[MockFunction]}
    classes={Object {}}
    closeElementPopup={[MockFunction]}
    data={
      Object {
        "widget1": Array [],
      }
    }
    displayElementInPopup={[MockFunction]}
    editable={false}
    layout={Object {}}
    onLayoutChange={[MockFunction]}
    refreshWithAccount={[MockFunction]}
    refreshWithoutAccount={[MockFunction]}
    startWidgetProcess={[MockFunction]}
    stopWidgetProcess={[MockFunction]}
    updatePopupProps={[MockFunction]}
    updateWidgetData={[MockFunction]}
    widgetActionWithAccount={[MockFunction]}
    widgetActionWithoutAccount={[MockFunction]}
    widgets={
      Array [
        Object {
          "header": true,
          "title": "Test feed",
          "type": "twitter_feed",
          "uuid": "widget1",
        },
        Object {
          "header": false,
          "title": "Test notifications",
          "type": "twitter_notifications",
          "uuid": "widget2",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <WidthProvider
        compactType="vertical"
        isDraggable={false}
        isResizable={false}
        layout={Object {}}
        measureBeforeMount={false}
        onLayoutChange={[Function]}
      >
        <WithStyles(Card)
          id="widget1"
        >
          <WithStyles(CardContent)>
            <ConditionalComponent
              render={true}
            >
              <WithStyles(Typography)
                color="textSecondary"
                gutterBottom={true}
              >
                <div>
                  Test feed
                </div>
              </WithStyles(Typography)>
            </ConditionalComponent>
            <InjectIntl(RawFeed)
              actionWithAccount={[Function]}
              actionWithoutAccount={[Function]}
              addToWidgetData={[Function]}
              closeElementPopup={[MockFunction]}
              data={Array []}
              displayElementInPopup={[MockFunction]}
              refreshWithAccount={[Function]}
              refreshWithoutAccount={[Function]}
              startWidgetProcess={[MockFunction]}
              stopWidgetProcess={[MockFunction]}
              updateElement={[Function]}
              updatePopupProps={[MockFunction]}
              updateWidgetActions={[Function]}
              uuid="widget1"
            />
          </WithStyles(CardContent)>
        </WithStyles(Card)>
        <WithStyles(Card)
          id="widget2"
        >
          <WithStyles(CardContent)>
            <ConditionalComponent
              render={false}
            >
              <WithStyles(Typography)
                color="textSecondary"
                gutterBottom={true}
              >
                <div>
                  Test notifications
                </div>
              </WithStyles(Typography)>
            </ConditionalComponent>
            <Notifications
              actionWithAccount={[Function]}
              actionWithoutAccount={[Function]}
              addToWidgetData={[Function]}
              closeElementPopup={[MockFunction]}
              displayElementInPopup={[MockFunction]}
              refreshWithAccount={[Function]}
              refreshWithoutAccount={[Function]}
              startWidgetProcess={[MockFunction]}
              stopWidgetProcess={[MockFunction]}
              updateElement={[Function]}
              updatePopupProps={[MockFunction]}
              updateWidgetActions={[Function]}
              uuid="widget2"
            />
          </WithStyles(CardContent)>
        </WithStyles(Card)>
      </WidthProvider>,
      "className": undefined,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(Card)
            id="widget1"
          >
            <WithStyles(CardContent)>
              <ConditionalComponent
                render={true}
              >
                <WithStyles(Typography)
                  color="textSecondary"
                  gutterBottom={true}
                >
                  <div>
                    Test feed
                  </div>
                </WithStyles(Typography)>
              </ConditionalComponent>
              <InjectIntl(RawFeed)
                actionWithAccount={[Function]}
                actionWithoutAccount={[Function]}
                addToWidgetData={[Function]}
                closeElementPopup={[MockFunction]}
                data={Array []}
                displayElementInPopup={[MockFunction]}
                refreshWithAccount={[Function]}
                refreshWithoutAccount={[Function]}
                startWidgetProcess={[MockFunction]}
                stopWidgetProcess={[MockFunction]}
                updateElement={[Function]}
                updatePopupProps={[MockFunction]}
                updateWidgetActions={[Function]}
                uuid="widget1"
              />
            </WithStyles(CardContent)>
          </WithStyles(Card)>,
          <WithStyles(Card)
            id="widget2"
          >
            <WithStyles(CardContent)>
              <ConditionalComponent
                render={false}
              >
                <WithStyles(Typography)
                  color="textSecondary"
                  gutterBottom={true}
                >
                  <div>
                    Test notifications
                  </div>
                </WithStyles(Typography)>
              </ConditionalComponent>
              <Notifications
                actionWithAccount={[Function]}
                actionWithoutAccount={[Function]}
                addToWidgetData={[Function]}
                closeElementPopup={[MockFunction]}
                displayElementInPopup={[MockFunction]}
                refreshWithAccount={[Function]}
                refreshWithoutAccount={[Function]}
                startWidgetProcess={[MockFunction]}
                stopWidgetProcess={[MockFunction]}
                updateElement={[Function]}
                updatePopupProps={[MockFunction]}
                updateWidgetActions={[Function]}
                uuid="widget2"
              />
            </WithStyles(CardContent)>
          </WithStyles(Card)>,
        ],
        "compactType": "vertical",
        "isDraggable": false,
        "isResizable": false,
        "layout": Object {},
        "measureBeforeMount": false,
        "onLayoutChange": [Function],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "widget1",
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(CardContent)>
              <ConditionalComponent
                render={true}
              >
                <WithStyles(Typography)
                  color="textSecondary"
                  gutterBottom={true}
                >
                  <div>
                    Test feed
                  </div>
                </WithStyles(Typography)>
              </ConditionalComponent>
              <InjectIntl(RawFeed)
                actionWithAccount={[Function]}
                actionWithoutAccount={[Function]}
                addToWidgetData={[Function]}
                closeElementPopup={[MockFunction]}
                data={Array []}
                displayElementInPopup={[MockFunction]}
                refreshWithAccount={[Function]}
                refreshWithoutAccount={[Function]}
                startWidgetProcess={[MockFunction]}
                stopWidgetProcess={[MockFunction]}
                updateElement={[Function]}
                updatePopupProps={[MockFunction]}
                updateWidgetActions={[Function]}
                uuid="widget1"
              />
            </WithStyles(CardContent)>,
            "id": "widget1",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <ConditionalComponent
                  render={true}
                >
                  <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test feed
                    </div>
                  </WithStyles(Typography)>
                </ConditionalComponent>,
                <InjectIntl(RawFeed)
                  actionWithAccount={[Function]}
                  actionWithoutAccount={[Function]}
                  addToWidgetData={[Function]}
                  closeElementPopup={[MockFunction]}
                  data={Array []}
                  displayElementInPopup={[MockFunction]}
                  refreshWithAccount={[Function]}
                  refreshWithoutAccount={[Function]}
                  startWidgetProcess={[MockFunction]}
                  stopWidgetProcess={[MockFunction]}
                  updateElement={[Function]}
                  updatePopupProps={[MockFunction]}
                  updateWidgetActions={[Function]}
                  uuid="widget1"
                />,
              ],
              "className": undefined,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test feed
                    </div>
                  </WithStyles(Typography)>,
                  "render": true,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <div>
                        Test feed
                      </div>,
                      undefined,
                    ],
                    "className": undefined,
                    "color": "textSecondary",
                    "gutterBottom": true,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Test feed",
                        "className": undefined,
                      },
                      "ref": null,
                      "rendered": "Test feed",
                      "type": "div",
                    },
                    undefined,
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "actionWithAccount": [Function],
                  "actionWithoutAccount": [Function],
                  "addToWidgetData": [Function],
                  "closeElementPopup": [MockFunction],
                  "containerClass": undefined,
                  "data": Array [],
                  "displayElementInPopup": [MockFunction],
                  "refreshWithAccount": [Function],
                  "refreshWithoutAccount": [Function],
                  "startWidgetProcess": [MockFunction],
                  "stopWidgetProcess": [MockFunction],
                  "updateElement": [Function],
                  "updatePopupProps": [MockFunction],
                  "updateWidgetActions": [Function],
                  "uuid": "widget1",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "widget2",
          "nodeType": "class",
          "props": Object {
            "children": <WithStyles(CardContent)>
              <ConditionalComponent
                render={false}
              >
                <WithStyles(Typography)
                  color="textSecondary"
                  gutterBottom={true}
                >
                  <div>
                    Test notifications
                  </div>
                </WithStyles(Typography)>
              </ConditionalComponent>
              <Notifications
                actionWithAccount={[Function]}
                actionWithoutAccount={[Function]}
                addToWidgetData={[Function]}
                closeElementPopup={[MockFunction]}
                displayElementInPopup={[MockFunction]}
                refreshWithAccount={[Function]}
                refreshWithoutAccount={[Function]}
                startWidgetProcess={[MockFunction]}
                stopWidgetProcess={[MockFunction]}
                updateElement={[Function]}
                updatePopupProps={[MockFunction]}
                updateWidgetActions={[Function]}
                uuid="widget2"
              />
            </WithStyles(CardContent)>,
            "id": "widget2",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <ConditionalComponent
                  render={false}
                >
                  <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test notifications
                    </div>
                  </WithStyles(Typography)>
                </ConditionalComponent>,
                <Notifications
                  actionWithAccount={[Function]}
                  actionWithoutAccount={[Function]}
                  addToWidgetData={[Function]}
                  closeElementPopup={[MockFunction]}
                  displayElementInPopup={[MockFunction]}
                  refreshWithAccount={[Function]}
                  refreshWithoutAccount={[Function]}
                  startWidgetProcess={[MockFunction]}
                  stopWidgetProcess={[MockFunction]}
                  updateElement={[Function]}
                  updatePopupProps={[MockFunction]}
                  updateWidgetActions={[Function]}
                  uuid="widget2"
                />,
              ],
              "className": undefined,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test notifications
                    </div>
                  </WithStyles(Typography)>,
                  "render": false,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <div>
                        Test notifications
                      </div>,
                      undefined,
                    ],
                    "className": undefined,
                    "color": "textSecondary",
                    "gutterBottom": true,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "Test notifications",
                        "className": undefined,
                      },
                      "ref": null,
                      "rendered": "Test notifications",
                      "type": "div",
                    },
                    undefined,
                  ],
                  "type": [Function],
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "actionWithAccount": [Function],
                  "actionWithoutAccount": [Function],
                  "addToWidgetData": [Function],
                  "closeElementPopup": [MockFunction],
                  "containerClass": undefined,
                  "data": undefined,
                  "displayElementInPopup": [MockFunction],
                  "refreshWithAccount": [Function],
                  "refreshWithoutAccount": [Function],
                  "startWidgetProcess": [MockFunction],
                  "stopWidgetProcess": [MockFunction],
                  "updateElement": [Function],
                  "updatePopupProps": [MockFunction],
                  "updateWidgetActions": [Function],
                  "uuid": "widget2",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <WidthProvider
          compactType="vertical"
          isDraggable={false}
          isResizable={false}
          layout={Object {}}
          measureBeforeMount={false}
          onLayoutChange={[Function]}
        >
          <WithStyles(Card)
            id="widget1"
          >
            <WithStyles(CardContent)>
              <ConditionalComponent
                render={true}
              >
                <WithStyles(Typography)
                  color="textSecondary"
                  gutterBottom={true}
                >
                  <div>
                    Test feed
                  </div>
                </WithStyles(Typography)>
              </ConditionalComponent>
              <InjectIntl(RawFeed)
                actionWithAccount={[Function]}
                actionWithoutAccount={[Function]}
                addToWidgetData={[Function]}
                closeElementPopup={[MockFunction]}
                data={Array []}
                displayElementInPopup={[MockFunction]}
                refreshWithAccount={[Function]}
                refreshWithoutAccount={[Function]}
                startWidgetProcess={[MockFunction]}
                stopWidgetProcess={[MockFunction]}
                updateElement={[Function]}
                updatePopupProps={[MockFunction]}
                updateWidgetActions={[Function]}
                uuid="widget1"
              />
            </WithStyles(CardContent)>
          </WithStyles(Card)>
          <WithStyles(Card)
            id="widget2"
          >
            <WithStyles(CardContent)>
              <ConditionalComponent
                render={false}
              >
                <WithStyles(Typography)
                  color="textSecondary"
                  gutterBottom={true}
                >
                  <div>
                    Test notifications
                  </div>
                </WithStyles(Typography)>
              </ConditionalComponent>
              <Notifications
                actionWithAccount={[Function]}
                actionWithoutAccount={[Function]}
                addToWidgetData={[Function]}
                closeElementPopup={[MockFunction]}
                displayElementInPopup={[MockFunction]}
                refreshWithAccount={[Function]}
                refreshWithoutAccount={[Function]}
                startWidgetProcess={[MockFunction]}
                stopWidgetProcess={[MockFunction]}
                updateElement={[Function]}
                updatePopupProps={[MockFunction]}
                updateWidgetActions={[Function]}
                uuid="widget2"
              />
            </WithStyles(CardContent)>
          </WithStyles(Card)>
        </WidthProvider>,
        "className": undefined,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(Card)
              id="widget1"
            >
              <WithStyles(CardContent)>
                <ConditionalComponent
                  render={true}
                >
                  <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test feed
                    </div>
                  </WithStyles(Typography)>
                </ConditionalComponent>
                <InjectIntl(RawFeed)
                  actionWithAccount={[Function]}
                  actionWithoutAccount={[Function]}
                  addToWidgetData={[Function]}
                  closeElementPopup={[MockFunction]}
                  data={Array []}
                  displayElementInPopup={[MockFunction]}
                  refreshWithAccount={[Function]}
                  refreshWithoutAccount={[Function]}
                  startWidgetProcess={[MockFunction]}
                  stopWidgetProcess={[MockFunction]}
                  updateElement={[Function]}
                  updatePopupProps={[MockFunction]}
                  updateWidgetActions={[Function]}
                  uuid="widget1"
                />
              </WithStyles(CardContent)>
            </WithStyles(Card)>,
            <WithStyles(Card)
              id="widget2"
            >
              <WithStyles(CardContent)>
                <ConditionalComponent
                  render={false}
                >
                  <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test notifications
                    </div>
                  </WithStyles(Typography)>
                </ConditionalComponent>
                <Notifications
                  actionWithAccount={[Function]}
                  actionWithoutAccount={[Function]}
                  addToWidgetData={[Function]}
                  closeElementPopup={[MockFunction]}
                  displayElementInPopup={[MockFunction]}
                  refreshWithAccount={[Function]}
                  refreshWithoutAccount={[Function]}
                  startWidgetProcess={[MockFunction]}
                  stopWidgetProcess={[MockFunction]}
                  updateElement={[Function]}
                  updatePopupProps={[MockFunction]}
                  updateWidgetActions={[Function]}
                  uuid="widget2"
                />
              </WithStyles(CardContent)>
            </WithStyles(Card)>,
          ],
          "compactType": "vertical",
          "isDraggable": false,
          "isResizable": false,
          "layout": Object {},
          "measureBeforeMount": false,
          "onLayoutChange": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "widget1",
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(CardContent)>
                <ConditionalComponent
                  render={true}
                >
                  <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test feed
                    </div>
                  </WithStyles(Typography)>
                </ConditionalComponent>
                <InjectIntl(RawFeed)
                  actionWithAccount={[Function]}
                  actionWithoutAccount={[Function]}
                  addToWidgetData={[Function]}
                  closeElementPopup={[MockFunction]}
                  data={Array []}
                  displayElementInPopup={[MockFunction]}
                  refreshWithAccount={[Function]}
                  refreshWithoutAccount={[Function]}
                  startWidgetProcess={[MockFunction]}
                  stopWidgetProcess={[MockFunction]}
                  updateElement={[Function]}
                  updatePopupProps={[MockFunction]}
                  updateWidgetActions={[Function]}
                  uuid="widget1"
                />
              </WithStyles(CardContent)>,
              "id": "widget1",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <ConditionalComponent
                    render={true}
                  >
                    <WithStyles(Typography)
                      color="textSecondary"
                      gutterBottom={true}
                    >
                      <div>
                        Test feed
                      </div>
                    </WithStyles(Typography)>
                  </ConditionalComponent>,
                  <InjectIntl(RawFeed)
                    actionWithAccount={[Function]}
                    actionWithoutAccount={[Function]}
                    addToWidgetData={[Function]}
                    closeElementPopup={[MockFunction]}
                    data={Array []}
                    displayElementInPopup={[MockFunction]}
                    refreshWithAccount={[Function]}
                    refreshWithoutAccount={[Function]}
                    startWidgetProcess={[MockFunction]}
                    stopWidgetProcess={[MockFunction]}
                    updateElement={[Function]}
                    updatePopupProps={[MockFunction]}
                    updateWidgetActions={[Function]}
                    uuid="widget1"
                  />,
                ],
                "className": undefined,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <WithStyles(Typography)
                      color="textSecondary"
                      gutterBottom={true}
                    >
                      <div>
                        Test feed
                      </div>
                    </WithStyles(Typography)>,
                    "render": true,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        <div>
                          Test feed
                        </div>,
                        undefined,
                      ],
                      "className": undefined,
                      "color": "textSecondary",
                      "gutterBottom": true,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Test feed",
                          "className": undefined,
                        },
                        "ref": null,
                        "rendered": "Test feed",
                        "type": "div",
                      },
                      undefined,
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "actionWithAccount": [Function],
                    "actionWithoutAccount": [Function],
                    "addToWidgetData": [Function],
                    "closeElementPopup": [MockFunction],
                    "containerClass": undefined,
                    "data": Array [],
                    "displayElementInPopup": [MockFunction],
                    "refreshWithAccount": [Function],
                    "refreshWithoutAccount": [Function],
                    "startWidgetProcess": [MockFunction],
                    "stopWidgetProcess": [MockFunction],
                    "updateElement": [Function],
                    "updatePopupProps": [MockFunction],
                    "updateWidgetActions": [Function],
                    "uuid": "widget1",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "widget2",
            "nodeType": "class",
            "props": Object {
              "children": <WithStyles(CardContent)>
                <ConditionalComponent
                  render={false}
                >
                  <WithStyles(Typography)
                    color="textSecondary"
                    gutterBottom={true}
                  >
                    <div>
                      Test notifications
                    </div>
                  </WithStyles(Typography)>
                </ConditionalComponent>
                <Notifications
                  actionWithAccount={[Function]}
                  actionWithoutAccount={[Function]}
                  addToWidgetData={[Function]}
                  closeElementPopup={[MockFunction]}
                  displayElementInPopup={[MockFunction]}
                  refreshWithAccount={[Function]}
                  refreshWithoutAccount={[Function]}
                  startWidgetProcess={[MockFunction]}
                  stopWidgetProcess={[MockFunction]}
                  updateElement={[Function]}
                  updatePopupProps={[MockFunction]}
                  updateWidgetActions={[Function]}
                  uuid="widget2"
                />
              </WithStyles(CardContent)>,
              "id": "widget2",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <ConditionalComponent
                    render={false}
                  >
                    <WithStyles(Typography)
                      color="textSecondary"
                      gutterBottom={true}
                    >
                      <div>
                        Test notifications
                      </div>
                    </WithStyles(Typography)>
                  </ConditionalComponent>,
                  <Notifications
                    actionWithAccount={[Function]}
                    actionWithoutAccount={[Function]}
                    addToWidgetData={[Function]}
                    closeElementPopup={[MockFunction]}
                    displayElementInPopup={[MockFunction]}
                    refreshWithAccount={[Function]}
                    refreshWithoutAccount={[Function]}
                    startWidgetProcess={[MockFunction]}
                    stopWidgetProcess={[MockFunction]}
                    updateElement={[Function]}
                    updatePopupProps={[MockFunction]}
                    updateWidgetActions={[Function]}
                    uuid="widget2"
                  />,
                ],
                "className": undefined,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <WithStyles(Typography)
                      color="textSecondary"
                      gutterBottom={true}
                    >
                      <div>
                        Test notifications
                      </div>
                    </WithStyles(Typography)>,
                    "render": false,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": Array [
                        <div>
                          Test notifications
                        </div>,
                        undefined,
                      ],
                      "className": undefined,
                      "color": "textSecondary",
                      "gutterBottom": true,
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": "Test notifications",
                          "className": undefined,
                        },
                        "ref": null,
                        "rendered": "Test notifications",
                        "type": "div",
                      },
                      undefined,
                    ],
                    "type": [Function],
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "actionWithAccount": [Function],
                    "actionWithoutAccount": [Function],
                    "addToWidgetData": [Function],
                    "closeElementPopup": [MockFunction],
                    "containerClass": undefined,
                    "data": undefined,
                    "displayElementInPopup": [MockFunction],
                    "refreshWithAccount": [Function],
                    "refreshWithoutAccount": [Function],
                    "startWidgetProcess": [MockFunction],
                    "stopWidgetProcess": [MockFunction],
                    "updateElement": [Function],
                    "updatePopupProps": [MockFunction],
                    "updateWidgetActions": [Function],
                    "uuid": "widget2",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Should render correctly without layout 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawDashboard
    addToWidgetData={[MockFunction]}
    classes={Object {}}
    closeElementPopup={[MockFunction]}
    data={
      Object {
        "widget1": Array [],
      }
    }
    displayElementInPopup={[MockFunction]}
    editable={false}
    layout={null}
    onLayoutChange={[MockFunction]}
    refreshWithAccount={[MockFunction]}
    refreshWithoutAccount={[MockFunction]}
    startWidgetProcess={[MockFunction]}
    stopWidgetProcess={[MockFunction]}
    updatePopupProps={[MockFunction]}
    updateWidgetData={[MockFunction]}
    widgetActionWithAccount={[MockFunction]}
    widgetActionWithoutAccount={[MockFunction]}
    widgets={
      Array [
        Object {
          "header": true,
          "title": "Test feed",
          "type": "twitter_feed",
          "uuid": "widget1",
        },
        Object {
          "header": false,
          "title": "Test notifications",
          "type": "twitter_notifications",
          "uuid": "widget2",
        },
      ]
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): null,
  Symbol(enzyme.__nodes__): Array [
    null,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
