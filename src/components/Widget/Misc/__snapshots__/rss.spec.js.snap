// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should keep theme consistant 1`] = `
Object {
  "link": Object {
    "& a": Object {
      "&:hover": Object {
        "textDecoration": "underline",
      },
      "&:visited": Object {
        "color": "#aaa",
      },
      "color": "#000",
      "textDecoration": "none",
    },
  },
}
`;

exports[`Should not crash without data 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawRss
    classes={Object {}}
    containerClass="aClass"
    data={null}
    intl={
      Object {
        "formatDate": [MockFunction] {
          "calls": Array [
            Array [
              "2019-01-01 01:01:01",
            ],
            Array [
              "2019-01-01 01:01:01",
            ],
            Array [
              "2019-01-01 01:01:01",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
      }
    }
    refreshWithoutAccount={[MockFunction]}
    startWidgetProcess={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "interval": 300000,
              "target": [MockFunction],
              "widget": "widget uuid",
            },
          ],
          Array [
            Object {
              "interval": 300000,
              "target": [MockFunction],
              "widget": "widget uuid",
            },
          ],
          Array [
            Object {
              "interval": 300000,
              "target": [MockFunction],
              "widget": "widget uuid",
            },
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    stopWidgetProcess={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "widget": "widget uuid",
            },
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    uuid="widget uuid"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): null,
  Symbol(enzyme.__nodes__): Array [
    null,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RawRss
    classes={Object {}}
    containerClass="aClass"
    data={
      Array [
        Object {
          "date": "2019-01-01 01:01:01",
          "href": "http://example.org",
          "id": "rss1",
          "title": "RSS First element",
        },
      ]
    }
    intl={
      Object {
        "formatDate": [MockFunction] {
          "calls": Array [
            Array [
              "2019-01-01 01:01:01",
            ],
          ],
          "results": Array [
            Object {
              "isThrow": false,
              "value": undefined,
            },
          ],
        },
      }
    }
    refreshWithoutAccount={[MockFunction]}
    startWidgetProcess={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "interval": 300000,
              "target": [MockFunction],
              "widget": "widget uuid",
            },
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    stopWidgetProcess={[MockFunction]}
    uuid="widget uuid"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <InfiniteScroll
        element="div"
        getScrollParent={null}
        hasMore={false}
        initialLoad={true}
        isReverse={false}
        loadMore={[Function]}
        loader={null}
        pageStart={0}
        ref={null}
        threshold={250}
        useCapture={false}
        useWindow={false}
      >
        <WithStyles(ListItem)
          button={true}
        >
          <WithStyles(ListItemText)
            primary={
              <a
                href="http://example.org"
              >
                RSS First element
              </a>
            }
          />
        </WithStyles(ListItem)>
      </InfiniteScroll>,
      "className": "aClass",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(ListItem)
            button={true}
          >
            <WithStyles(ListItemText)
              primary={
                <a
                  href="http://example.org"
                >
                  RSS First element
                </a>
              }
            />
          </WithStyles(ListItem)>,
        ],
        "element": "div",
        "getScrollParent": null,
        "hasMore": false,
        "initialLoad": true,
        "isReverse": false,
        "loadMore": [Function],
        "loader": null,
        "pageStart": 0,
        "ref": null,
        "threshold": 250,
        "useCapture": false,
        "useWindow": false,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "rss1",
          "nodeType": "class",
          "props": Object {
            "button": true,
            "children": <WithStyles(ListItemText)
              primary={
                <a
                  href="http://example.org"
                >
                  RSS First element
                </a>
              }
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "className": undefined,
              "primary": <a
                href="http://example.org"
              >
                RSS First element
              </a>,
              "secondary": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <InfiniteScroll
          element="div"
          getScrollParent={null}
          hasMore={false}
          initialLoad={true}
          isReverse={false}
          loadMore={[Function]}
          loader={null}
          pageStart={0}
          ref={null}
          threshold={250}
          useCapture={false}
          useWindow={false}
        >
          <WithStyles(ListItem)
            button={true}
          >
            <WithStyles(ListItemText)
              primary={
                <a
                  href="http://example.org"
                >
                  RSS First element
                </a>
              }
            />
          </WithStyles(ListItem)>
        </InfiniteScroll>,
        "className": "aClass",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(ListItem)
              button={true}
            >
              <WithStyles(ListItemText)
                primary={
                  <a
                    href="http://example.org"
                  >
                    RSS First element
                  </a>
                }
              />
            </WithStyles(ListItem)>,
          ],
          "element": "div",
          "getScrollParent": null,
          "hasMore": false,
          "initialLoad": true,
          "isReverse": false,
          "loadMore": [Function],
          "loader": null,
          "pageStart": 0,
          "ref": null,
          "threshold": 250,
          "useCapture": false,
          "useWindow": false,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "rss1",
            "nodeType": "class",
            "props": Object {
              "button": true,
              "children": <WithStyles(ListItemText)
                primary={
                  <a
                    href="http://example.org"
                  >
                    RSS First element
                  </a>
                }
              />,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": undefined,
                "primary": <a
                  href="http://example.org"
                >
                  RSS First element
                </a>,
                "secondary": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
