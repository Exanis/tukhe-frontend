// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Notifications
    actionWithAccount={[MockFunction]}
    addToWidgetData={[MockFunction]}
    closeElementPopup={[MockFunction]}
    containerClass="test class"
    data={
      Array [
        Object {
          "author": Object {
            "avatar": "http://example.org/image.gif",
            "name": "test",
            "protected": false,
            "screen_name": "test screen name",
            "verified": true,
          },
          "id": "tweet number one",
          "media": Array [
            Object {
              "media_url": "real media url",
              "url": "[media]",
            },
          ],
          "quoted": Object {
            "id": "tweetid",
          },
          "replying_to": "test reply",
          "retweeted_status": null,
          "text": "Test de 
tweet [badlink] [otherlink] [link] [media]",
          "urls": Array [
            Object {
              "short": "[link]",
              "target": "twitter/tweetid",
            },
            Object {
              "short": "[badlink]",
              "target": "http://www.google.fr",
            },
            Object {
              "short": "[otherlink]",
              "target": "http://www.twitter.com",
            },
          ],
          "user_liked": true,
          "user_retweeted": true,
        },
      ]
    }
    displayElementInPopup={[MockFunction]}
    intl={
      Object {
        "formatMessage": [Function],
      }
    }
    refreshWithAccount={[MockFunction]}
    startWidgetProcess={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "interval": 21000,
              "target": [MockFunction],
              "widget": "uuid",
            },
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    stopWidgetProcess={[MockFunction]}
    updateElement={[MockFunction]}
    updatePopupProps={[MockFunction]}
    updateWidgetActions={[MockFunction]}
    uuid="uuid"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <InfiniteScroll
        element="div"
        getScrollParent={null}
        hasMore={false}
        initialLoad={true}
        isReverse={false}
        loadMore={[Function]}
        loader={null}
        pageStart={0}
        ref={null}
        threshold={250}
        useCapture={false}
        useWindow={false}
      >
        <WithStyles(InjectIntl(RawTweet))
          actionWithAccount={[MockFunction]}
          displayElementInPopup={[MockFunction]}
          tweet={
            Object {
              "author": Object {
                "avatar": "http://example.org/image.gif",
                "name": "test",
                "protected": false,
                "screen_name": "test screen name",
                "verified": true,
              },
              "id": "tweet number one",
              "media": Array [
                Object {
                  "media_url": "real media url",
                  "url": "[media]",
                },
              ],
              "quoted": Object {
                "id": "tweetid",
              },
              "replying_to": "test reply",
              "retweeted_status": null,
              "text": "Test de 
tweet [badlink] [otherlink] [link] [media]",
              "urls": Array [
                Object {
                  "short": "[link]",
                  "target": "twitter/tweetid",
                },
                Object {
                  "short": "[badlink]",
                  "target": "http://www.google.fr",
                },
                Object {
                  "short": "[otherlink]",
                  "target": "http://www.twitter.com",
                },
              ],
              "user_liked": true,
              "user_retweeted": true,
            }
          }
          updateElement={[MockFunction]}
          updatePopupProps={[MockFunction]}
        />
      </InfiniteScroll>,
      "className": "test class",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(InjectIntl(RawTweet))
            actionWithAccount={[MockFunction]}
            displayElementInPopup={[MockFunction]}
            tweet={
              Object {
                "author": Object {
                  "avatar": "http://example.org/image.gif",
                  "name": "test",
                  "protected": false,
                  "screen_name": "test screen name",
                  "verified": true,
                },
                "id": "tweet number one",
                "media": Array [
                  Object {
                    "media_url": "real media url",
                    "url": "[media]",
                  },
                ],
                "quoted": Object {
                  "id": "tweetid",
                },
                "replying_to": "test reply",
                "retweeted_status": null,
                "text": "Test de 
tweet [badlink] [otherlink] [link] [media]",
                "urls": Array [
                  Object {
                    "short": "[link]",
                    "target": "twitter/tweetid",
                  },
                  Object {
                    "short": "[badlink]",
                    "target": "http://www.google.fr",
                  },
                  Object {
                    "short": "[otherlink]",
                    "target": "http://www.twitter.com",
                  },
                ],
                "user_liked": true,
                "user_retweeted": true,
              }
            }
            updateElement={[MockFunction]}
            updatePopupProps={[MockFunction]}
          />,
        ],
        "element": "div",
        "getScrollParent": null,
        "hasMore": false,
        "initialLoad": true,
        "isReverse": false,
        "loadMore": [Function],
        "loader": null,
        "pageStart": 0,
        "ref": null,
        "threshold": 250,
        "useCapture": false,
        "useWindow": false,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "tweet number one",
          "nodeType": "class",
          "props": Object {
            "actionWithAccount": [MockFunction],
            "displayElementInPopup": [MockFunction],
            "tweet": Object {
              "author": Object {
                "avatar": "http://example.org/image.gif",
                "name": "test",
                "protected": false,
                "screen_name": "test screen name",
                "verified": true,
              },
              "id": "tweet number one",
              "media": Array [
                Object {
                  "media_url": "real media url",
                  "url": "[media]",
                },
              ],
              "quoted": Object {
                "id": "tweetid",
              },
              "replying_to": "test reply",
              "retweeted_status": null,
              "text": "Test de 
tweet [badlink] [otherlink] [link] [media]",
              "urls": Array [
                Object {
                  "short": "[link]",
                  "target": "twitter/tweetid",
                },
                Object {
                  "short": "[badlink]",
                  "target": "http://www.google.fr",
                },
                Object {
                  "short": "[otherlink]",
                  "target": "http://www.twitter.com",
                },
              ],
              "user_liked": true,
              "user_retweeted": true,
            },
            "updateElement": [MockFunction],
            "updatePopupProps": [MockFunction],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <InfiniteScroll
          element="div"
          getScrollParent={null}
          hasMore={false}
          initialLoad={true}
          isReverse={false}
          loadMore={[Function]}
          loader={null}
          pageStart={0}
          ref={null}
          threshold={250}
          useCapture={false}
          useWindow={false}
        >
          <WithStyles(InjectIntl(RawTweet))
            actionWithAccount={[MockFunction]}
            displayElementInPopup={[MockFunction]}
            tweet={
              Object {
                "author": Object {
                  "avatar": "http://example.org/image.gif",
                  "name": "test",
                  "protected": false,
                  "screen_name": "test screen name",
                  "verified": true,
                },
                "id": "tweet number one",
                "media": Array [
                  Object {
                    "media_url": "real media url",
                    "url": "[media]",
                  },
                ],
                "quoted": Object {
                  "id": "tweetid",
                },
                "replying_to": "test reply",
                "retweeted_status": null,
                "text": "Test de 
tweet [badlink] [otherlink] [link] [media]",
                "urls": Array [
                  Object {
                    "short": "[link]",
                    "target": "twitter/tweetid",
                  },
                  Object {
                    "short": "[badlink]",
                    "target": "http://www.google.fr",
                  },
                  Object {
                    "short": "[otherlink]",
                    "target": "http://www.twitter.com",
                  },
                ],
                "user_liked": true,
                "user_retweeted": true,
              }
            }
            updateElement={[MockFunction]}
            updatePopupProps={[MockFunction]}
          />
        </InfiniteScroll>,
        "className": "test class",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <WithStyles(InjectIntl(RawTweet))
              actionWithAccount={[MockFunction]}
              displayElementInPopup={[MockFunction]}
              tweet={
                Object {
                  "author": Object {
                    "avatar": "http://example.org/image.gif",
                    "name": "test",
                    "protected": false,
                    "screen_name": "test screen name",
                    "verified": true,
                  },
                  "id": "tweet number one",
                  "media": Array [
                    Object {
                      "media_url": "real media url",
                      "url": "[media]",
                    },
                  ],
                  "quoted": Object {
                    "id": "tweetid",
                  },
                  "replying_to": "test reply",
                  "retweeted_status": null,
                  "text": "Test de 
tweet [badlink] [otherlink] [link] [media]",
                  "urls": Array [
                    Object {
                      "short": "[link]",
                      "target": "twitter/tweetid",
                    },
                    Object {
                      "short": "[badlink]",
                      "target": "http://www.google.fr",
                    },
                    Object {
                      "short": "[otherlink]",
                      "target": "http://www.twitter.com",
                    },
                  ],
                  "user_liked": true,
                  "user_retweeted": true,
                }
              }
              updateElement={[MockFunction]}
              updatePopupProps={[MockFunction]}
            />,
          ],
          "element": "div",
          "getScrollParent": null,
          "hasMore": false,
          "initialLoad": true,
          "isReverse": false,
          "loadMore": [Function],
          "loader": null,
          "pageStart": 0,
          "ref": null,
          "threshold": 250,
          "useCapture": false,
          "useWindow": false,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "tweet number one",
            "nodeType": "class",
            "props": Object {
              "actionWithAccount": [MockFunction],
              "displayElementInPopup": [MockFunction],
              "tweet": Object {
                "author": Object {
                  "avatar": "http://example.org/image.gif",
                  "name": "test",
                  "protected": false,
                  "screen_name": "test screen name",
                  "verified": true,
                },
                "id": "tweet number one",
                "media": Array [
                  Object {
                    "media_url": "real media url",
                    "url": "[media]",
                  },
                ],
                "quoted": Object {
                  "id": "tweetid",
                },
                "replying_to": "test reply",
                "retweeted_status": null,
                "text": "Test de 
tweet [badlink] [otherlink] [link] [media]",
                "urls": Array [
                  Object {
                    "short": "[link]",
                    "target": "twitter/tweetid",
                  },
                  Object {
                    "short": "[badlink]",
                    "target": "http://www.google.fr",
                  },
                  Object {
                    "short": "[otherlink]",
                    "target": "http://www.twitter.com",
                  },
                ],
                "user_liked": true,
                "user_retweeted": true,
              },
              "updateElement": [MockFunction],
              "updatePopupProps": [MockFunction],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;

exports[`Should render correctly without data 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Notifications
    actionWithAccount={[MockFunction]}
    addToWidgetData={[MockFunction]}
    closeElementPopup={[MockFunction]}
    containerClass="test class"
    data={null}
    displayElementInPopup={[MockFunction]}
    intl={
      Object {
        "formatMessage": [Function],
      }
    }
    refreshWithAccount={[MockFunction]}
    startWidgetProcess={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "interval": 21000,
              "target": [MockFunction],
              "widget": "uuid",
            },
          ],
          Array [
            Object {
              "interval": 21000,
              "target": [MockFunction],
              "widget": "uuid",
            },
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    stopWidgetProcess={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "widget": "uuid",
            },
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    updateElement={[MockFunction]}
    updatePopupProps={[MockFunction]}
    updateWidgetActions={[MockFunction]}
    uuid="uuid"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): null,
  Symbol(enzyme.__nodes__): Array [
    null,
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
